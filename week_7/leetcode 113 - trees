int** result;
int* columnSizes;
int resultSize;

void dfs(struct TreeNode* root, int targetSum, int* path, int pathLen) {
    if (root == NULL) return;

    path[pathLen++] = root->val;
    targetSum -= root->val;

    if (root->left == NULL && root->right == NULL) {
        if (targetSum == 0) {
            int* validPath = malloc(pathLen * sizeof(int));
            for (int i = 0; i < pathLen; ++i) {
                validPath[i] = path[i];
            }
            result[resultSize] = validPath;
            columnSizes[resultSize] = pathLen;
            resultSize++;
        }
    } else {
        dfs(root->left, targetSum, path, pathLen);
        dfs(root->right, targetSum, path, pathLen);
    }
}

int** pathSum(struct TreeNode* root, int targetSum, int* returnSize, int** returnColumnSizes) {
    result = malloc(1000 * sizeof(int*));
    columnSizes = malloc(1000 * sizeof(int));
    int* path = malloc(1000 * sizeof(int));
    resultSize = 0;
    dfs(root, targetSum, path, 0);
    free(path);
    *returnSize = resultSize;
    *returnColumnSizes = columnSizes;
    return result;
}
